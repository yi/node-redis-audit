// Generated by CoffeeScript 1.6.3
(function() {
  var DEFAULT_OPTIONS, RedisAudit, assert, debuglog, redis, _,
    __slice = [].slice;

  debuglog = require("debug")("redis-audit");

  assert = require("assert");

  _ = require("underscore");

  redis = require("redis");

  DEFAULT_OPTIONS = {
    maxLogLength: 9999,
    redisHost: "localhost",
    redisPort: "6379",
    prefix: "raudit",
    delimiter: "\t"
  };

  RedisAudit = (function() {
    function RedisAudit(options) {
      var key, val;
      if (options == null) {
        options = {};
      }
      this.options = _.extend({}, DEFAULT_OPTIONS, options);
      this.redisClient = options.redisClient;
      if (this.redisClient == null) {
        for (key in DEFAULT_OPTIONS) {
          val = DEFAULT_OPTIONS[key];
          delete options[key];
        }
        this.redisClient = redis.createClient(this.options.redisPort, this.options.redisHost, options);
      }
    }

    RedisAudit.prototype.add = function() {
      var callback, info, key,
        _this = this;
      key = arguments[0], info = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      assert(key, "missing key");
      if (_.isFunction(_.last(info))) {
        callback = info.pop();
      }
      if (!(info.length > 0)) {
        if (callback != null) {
          callback();
        }
        return;
      }
      key = "" + this.options.prefix + ":" + key;
      this.redisClient.RPUSH(key, info.join(this.options.delimiter), function(err, length) {
        if (err != null) {
          debuglog("[add] ERROR: when RPUSH. error: " + err);
          if (err != null) {
            callback(err);
          }
          return;
        }
        if (length > _this.options.maxLogLength) {
          _this.redisClient.LTRIM(key(0, _this.options.maxLogLength - 1, function(err) {
            if (err != null) {
              debuglog("[add] ERROR: when LTRIM. error: " + err);
            }
            if (callback != null) {
              callback(err);
            }
          }));
        } else {
          if (callback != null) {
            callback();
          }
        }
      });
    };

    RedisAudit.prototype.clear = function(key, callback) {
      assert(key, "missing key");
      key = "" + this.options.prefix + ":" + key;
      return this.redisClient.DEL(key, callback);
    };

    RedisAudit.prototype.list = function(key, from, to, callback) {
      var _ref,
        _this = this;
      assert(key, "missing key");
      from = parseInt(from, 10) || 0;
      to = parseInt(to, 10) || 0;
      if (from === to) {
        return [];
      }
      if (from > to) {
        _ref = [to, from], from = _ref[0], to = _ref[1];
      }
      key = "" + this.options.prefix + ":" + key;
      this.redisClient.LRANGE(key, from, to, function(err, items) {
        if (err != null) {
          debuglog("[list] ERROR: when LRANGE. error: " + err);
          callback(err);
          return;
        }
        callback(null, items.map(function(val) {
          return val.split(_this.options.delimiter);
        }));
      });
    };

    RedisAudit.prototype.rlist = function(key, from, to, callback) {
      this.list(key, to, from, function(err, items) {
        if (Array.isArray(items)) {
          items.reverse();
        }
        callback(err, items);
      });
    };

    RedisAudit.prototype.count = function(key, callback) {
      assert(key, "missing key");
      assert(_.isFunction(callback), "missing callback");
      key = "" + this.options.prefix + ":" + key;
      this.redisClient.LLEN(key, callback);
    };

    RedisAudit.prototype.latest = function(key, count, callback) {
      var _this = this;
      assert(key, "missing key");
      assert(_.isFunction(callback), "missing callback");
      count = parseInt(count, 10) || 0;
      if (count < 1) {
        return callback(null, []);
      }
      key = "" + this.options.prefix + ":" + key;
      this.redisClient.LRANGE(key, -count, -1, function(err, items) {
        if (err != null) {
          debuglog("[latest] ERROR: when LRANGE. error: " + err);
          callback(err);
          return;
        }
        return callback(null, items.reverse().map(function(val) {
          return val.split(_this.options.delimiter);
        }));
      });
    };

    return RedisAudit;

  })();

  module.exports = RedisAudit;

}).call(this);
