// Generated by CoffeeScript 1.7.1
(function() {
  var KEY, RedisAudit, audit, should;

  require('mocha');

  should = require('chai').should();

  RedisAudit = require("../redis-audit");

  KEY = "test";

  audit = new RedisAudit({
    maxLogLength: 10
  });

  describe("RedisAudit", function() {
    describe("constructor", function() {
      return it("could be instancelised with custom options", function() {
        var r;
        r = new RedisAudit({
          maxLogLength: 11111,
          prefix: "testaudit",
          delimiter: "~~"
        });
        r.options.maxLogLength.should.eql(11111);
        r.options.prefix.should.eql("testaudit");
        return r.options.delimiter.should.eql("~~");
      });
    });
    return describe("add", function() {
      it("should work", function(done) {
        return audit.add(KEY, 1, "abc", function(err) {
          should.not.exist(err);
          return done();
        });
      });
      it("add and pull back", function(done) {
        return audit.add(KEY, 1, "abc", function(err) {
          should.not.exist(err);
          return audit.add(KEY, 2, "efg", function(err) {
            should.not.exist(err);
            return audit.latest(KEY, 1, function(err, items) {
              should.not.exist(err);
              should.exist(items);
              Array.isArray(items).should.be.ok;
              items.length.should.eql(1);
              Array.isArray(items[0]).should.be.ok;
              items[0].length.should.eql(2);
              items[0][0].should.eql("2");
              items[0][1].should.eql("efg");
              return done();
            });
          });
        });
      });
      it("add and pull back multiple", function(done) {
        return audit.add(KEY, 1, "abc", function(err) {
          return audit.add(KEY, 2, "efg", function(err) {
            return audit.add(KEY, 3, "hij", function(err) {
              return audit.add(KEY, 4, "klm", function(err) {
                return audit.add(KEY, 5, "nop", function(err) {
                  return audit.list(KEY, 0, 3, function(err, items) {
                    should.not.exist(err);
                    Array.isArray(items).should.be.ok;
                    items.length.should.eql(4);
                    items[0][0].should.eql("1");
                    items[1][0].should.eql("2");
                    items[2][0].should.eql("3");
                    items[3][0].should.eql("4");
                    return done();
                  });
                });
              });
            });
          });
        });
      });
      return it("add and pull back reversely", function(done) {
        return audit.add(KEY, 1, "abc", function(err) {
          return audit.add(KEY, 2, "efg", function(err) {
            return audit.add(KEY, 3, "hij", function(err) {
              return audit.add(KEY, 4, "klm", function(err) {
                return audit.add(KEY, 5, "nop", function(err) {
                  return audit.rlist(KEY, 0, 3, function(err, items) {
                    should.not.exist(err);
                    Array.isArray(items).should.be.ok;
                    items.length.should.eql(4);
                    items[0][0].should.eql("4");
                    items[1][0].should.eql("3");
                    items[2][0].should.eql("2");
                    items[3][0].should.eql("1");
                    return audit.count(KEY, function(err, count) {
                      should.not.exist(err);
                      count.should.eql(5);
                      return done();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

}).call(this);
